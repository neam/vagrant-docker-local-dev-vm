VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    # base box for virtualbox/vmware
    config.vm.box = "ubuntu/trusty64"

    # set memory to 2gb since the default of 0.5gb is too little
    config.vm.provider :virtualbox do |v|
        v.memory = 2048
    end

    # set up a secondary network adapter for accessing services running on the developer's machine
    config.vm.network :private_network, ip: "192.168.99.100", :adapter => 2

    # using the Docker provisioner will automatically install Docker
    config.vm.provision "docker"

    # Enable Docker daemon listen on TCP :4243
    config.vm.provision :shell, inline: <<-EOF
        service ssh restart

        echo "Enable Docker daemon listen on TCP :4243" >&2
        echo 'DOCKER_OPTS="-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock"' >> /etc/default/docker
        echo 'DOCKER_OPTS="-D ${DOCKER_OPTS}"' >> /etc/default/docker

        service docker restart
    EOF
    config.vm.provision "shell", inline: "ps aux | grep 'sshd:' | awk '{print $2}' | xargs kill"

    # set up a tcp proxy that enable access to selenium server on developer machine on port 14444 within docker containers
    config.vm.provision :shell, inline: <<-EOF
        set -x
        PORT=14444

        # tcp proxy through iptables from http://www.debian-administration.org/article/595/Need_a_generic_iptables_tcp_proxy
        CONTAINER_EXPOSED_IP=172.17.42.1
        CONTAINER_EXPOSED_PORT=$PORT
        HOST_VM_EXPOSED_IP=192.168.99.1
        HOST_VM_EXPOSED_PORT=4444

        iptables -t nat -A PREROUTING --dst $CONTAINER_EXPOSED_IP -p tcp --dport $CONTAINER_EXPOSED_PORT -j DNAT \
        --to-destination $HOST_VM_EXPOSED_IP:$HOST_VM_EXPOSED_PORT
        iptables -t nat -A POSTROUTING -p tcp --dst $HOST_VM_EXPOSED_IP --dport $HOST_VM_EXPOSED_PORT -j SNAT \
        --to-source $CONTAINER_EXPOSED_IP
        iptables -t nat -A OUTPUT --dst $CONTAINER_EXPOSED_IP -p tcp --dport $CONTAINER_EXPOSED_PORT -j DNAT \
        --to-destination $HOST_VM_EXPOSED_IP:$HOST_VM_EXPOSED_PORT

        # make the tcp-proxy available after reboot
        echo '#!/bin/sh
iptables-restore < /etc/iptables.rules
exit 0' > /etc/network/if-pre-up.d/iptablesload

        echo '#!/bin/sh
iptables-save > /etc/iptables.rules
if [ -f /etc/iptables.downrules ]; then
   iptables-restore < /etc/iptables.downrules
fi
exit 0' > /etc/network/if-post-down.d/iptablessave

        sudo chmod +x /etc/network/if-post-down.d/iptablessave
        sudo chmod +x /etc/network/if-pre-up.d/iptablesload

        echo "Enabled access to selenium server on developer machine on port $PORT within docker containers" >&2
    EOF

    # configure docker port so that we can set DOCKER_HOST to tcp://localhost:4243 locally on osx and access docker commands
    config.vm.network :forwarded_port, guest: 4243, host: 4243

    # port forward necessary for http://localhost:$WEB_PORTS to work on local machine
    config.vm.network :forwarded_port, guest: 50505, host: 50505
    config.vm.network :forwarded_port, guest: 11111, host: 11111
    config.vm.network :forwarded_port, guest: 10101, host: 10101

    # port forward necessary to be able to SSH directly into docker web containers (for easier more direct ssh connections as compared to proxying through the host vm)
    config.vm.network :forwarded_port, guest: 2201, host: 2201
    config.vm.network :forwarded_port, guest: 2202, host: 2202
    config.vm.network :forwarded_port, guest: 2203, host: 2203

    # port forward necessary to be able to connect to xdebug debugger directly into docker web containers
    config.vm.network :forwarded_port, guest: 9001, host: 9001
    config.vm.network :forwarded_port, guest: 9002, host: 9002
    config.vm.network :forwarded_port, guest: 9003, host: 9003

    # port forward necessary to be able to connect to the mysql server against 127.0.0.1:$DB_PORT locally
    config.vm.network :forwarded_port, guest: <%= ENV['DB_PORT'] %>, host: <%= ENV['DB_PORT'] %>

    # port forward necessary to be able to SSH directly into docker proxy container (for easier more direct ssh connections as compared to proxying through the host vm)
    # currently-inactivate config.vm.network :forwarded_port, guest: 1022, host: 1022

    # port forward necessary for http://localhost:$PROXY_PORT to work on local machine
    config.vm.network :forwarded_port, guest: 12121, host: 12121

    # port forward for mailcatcher ports
    config.vm.network :forwarded_port, guest: 1025, host: 1025
    config.vm.network :forwarded_port, guest: 1080, host: 1080

    #<% if ENV.has_key? "LOCAL_SOURCE_CODE" and ENV['LOCAL_SOURCE_CODE'].to_s != "" %>
    config.vm.synced_folder "<%= ENV['LOCAL_SOURCE_CODE'] %>", "/host-vm-code-share",
      :owner => "nobody",
      :group => "nobody"
    #<% end %>

#        web.vm.provider :digital_ocean do |provider|
#            provider.client_id = "<%= ENV['DIGITAL_OCEAN_CLIENT_ID'] %>"
#            provider.api_key = "<%= ENV['DIGITAL_OCEAN_API_KEY'] %>"
#            provider.image = "Dokku v0.2.3 on Ubuntu 14.04"
#            provider.private_networking = true
#            provider.backups_enabled = true
#            provider.region = "<%= ENV['DIGITAL_OCEAN_REGION'] %>"
#            provider.size = "<%= ENV['SIZE'] %>"
#        end
#
#        # sets the name of the droplet
#        web.vm.define "<%= ENV['HOSTNAME'] %>" do |t|
#        end

end